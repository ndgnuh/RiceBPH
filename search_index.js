var documenterSearchIndex = {"docs":
[{"location":"50-model-description/","page":"Model description","title":"Model description","text":"using RiceBPH","category":"page"},{"location":"50-model-description/#Model-description","page":"Model description","title":"Model description","text":"","category":"section"},{"location":"50-model-description/#Purpose-and-pattern","page":"Model description","title":"Purpose and pattern","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"This model has two purposes, the first is to build a stable model for BPH population. The second is to research the effectiveness of cultivated flower in preventing the dispersion of BPH and providing a rough guideline  on how flowers should be planted to effectively prevent the BPH from spreading  and still, ensure economic benefit for the farmers.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"To verify the stability and trustiness of the model, we use population structure and patterns from Syahrawati2019 as a pattern for verifying our model.","category":"page"},{"location":"50-model-description/#Entities,-state-variables,-and-scales","page":"Model description","title":"Entities, state variables, and scales","text":"","category":"section"},{"location":"50-model-description/#Entities-and-state-variables","page":"Model description","title":"Entities and state variables","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"Our model contains two types of entities.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"The first type of entity is the BPH. Each is associated with, energy, a stage, gender, and type. The BPH has a truncate-winged form Brachypterous and a fully-winged form Macropterous. The Brachypterous variant moves slowly and has a high reproduction rate, while the other has the opposite specifications. We also employ a countdown-based system to model the reproduction and growth of BPHs.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"Variable Description Value(s)\ni The agent identifier number 1 2 ldots\nx_i The x-coordinate of agent i on the environment grid 1 2 ldots S\ny_i The y-coordinate of agent i on the environment grid 1 2 ldots S\nz^(g)_i The gender of agent i (male, female) 0 1\nz^(s)_i The current stage of agent i (egg, nymph, adult, dead) 0 1 2 3\nz^(f)_i The form of agent i (brachypterous, macropterous) 0 1\nt^(s)_i The countdown to the next stage of agent i 0 1ldots\nt^(r)_i The countdown to the next reproduction of agent i 0 1ldots","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"The second type of entity is the environment (grid) cell. An environment cell can plant rice or cultivated flower.  Rice cells have living energy while flower cells do not.  But for the sake of simplicity, we model them in one entity and have the flower cells ignore the energy. All cells have an elimination probability, which is the probability that the BPH on that cell will be eliminated. The cultivated flowers do not directly eliminate the BPH, they attract their natural enemies (such as bees). The natural enemies wander around, therefore every cell has an elimination probability.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"info: Info\nSince we use Julia's matrices to represent the simulated environment, there is no such thing as a GridCell type with all the described state variable in the implementation. These state variables are written is this way for the sake of model description.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"Variable Description Value(s)\nx The cell's x-coordinate on the environment grid 1 2ldotsS\ny The cell's y-coordinate on the environment grid 1 2ldotsS\nt_x y The type of the cell at x y (flower, rice) 0 1\ne_x y The energy of the cell at x y 0 1\np_x y The elimination probability of the cell at x y 0 P_0","category":"page"},{"location":"50-model-description/#Scales","page":"Model description","title":"Scales","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"Regarding the scales of the model, we use a discrete space scale. The total simulated environment is equivalent to a 360mathrmm^2 rice field. The field is divided into 125times125 grid cells; i.e. each cell's width is roughly equivalent to 015mathrmm real world length.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"Time is also represented discretely in the model. Each time step is equivalent to one actual hour.  The total duration of the simulation is 2880 steps, or 120 days, equivalent to a crop cycle.","category":"page"},{"location":"50-model-description/#Process-overview-and-scheduling","page":"Model description","title":"Process overview and scheduling","text":"","category":"section"},{"location":"50-model-description/#Scheduling","page":"Model description","title":"Scheduling","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"In each step of the simulation, the BPH agents execute their processes and  then the environment cells do theirs. The BPH agents with higher energy perform their actions first.","category":"page"},{"location":"50-model-description/#The-vegetation-cells-process","page":"Model description","title":"The vegetation cells process","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"The environment only has one action, which is to eliminate the BPHs. This action does not apply if there is no flower planted.","category":"page"},{"location":"50-model-description/#The-BPH-agents-processes","page":"Model description","title":"The BPH agents processes","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"The agent actions are determined by their stages, each stage have different behaviours.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"RiceBPH.Models.agent_step_egg!\nRiceBPH.Models.agent_step_nymph!\nRiceBPH.Models.agent_step_adult!","category":"page"},{"location":"50-model-description/#RiceBPH.Models.agent_step_egg!","page":"Model description","title":"RiceBPH.Models.agent_step_egg!","text":"agent_step_egg!(agent, model)\n\nThe eggs have the following actions (performed in order):\n\nagent_action_growup!\nagent_action_die!\n\n\n\n\n\n","category":"function"},{"location":"50-model-description/#RiceBPH.Models.agent_step_nymph!","page":"Model description","title":"RiceBPH.Models.agent_step_nymph!","text":"agent_step_nymph!(agent, model)\n\nThe nymphs have the following actions (performed in order):\n\nagent_action_growup!\nagent_action_move!\nagent_action_eat!\nagent_action_die!\n\n\n\n\n\n","category":"function"},{"location":"50-model-description/#RiceBPH.Models.agent_step_adult!","page":"Model description","title":"RiceBPH.Models.agent_step_adult!","text":"agent_step_adult!(agent, model)\n\nThe adult BPHs have the following actions (performed in order):\n\nagent_action_growup!\nagent_action_move!\nagent_action_eat!\nagent_action_reproduce!\nagent_action_die!\n\n\n\n\n\n","category":"function"},{"location":"50-model-description/#Design-Concepts","page":"Model description","title":"Design Concepts","text":"","category":"section"},{"location":"50-model-description/#Basic-principle","page":"Model description","title":"Basic principle","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"The model is based on a natural real-life phenomenon called \"hopper burn\", where a small infestation of BPH spreads out and destroys the whole rice field.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"We model bio-conversion using energy.  The energy is used to measure how well an agent is living.  The energy accepts values ranging from zero to one. When an agent's energy goes to zero, it dies and gets removed from the simulation. Both entities have their energy scaled to 0 and 1 and there is a conversion parameter to represent the relative energy scale between them.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"The flower grid cells are simulations of real-life cultivating flowers. The flowers invite the BPH's natural enemies to eliminate them.  We emulate this with an elimination probability map on the whole field. Each cell has a probability that: if a BPH is in that position, it might get eliminated.","category":"page"},{"location":"50-model-description/#Emergence","page":"Model description","title":"Emergence","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"At a high level, we observe the BPH population structure and the overall healthiness of the rice field.","category":"page"},{"location":"50-model-description/#Adaptation","page":"Model description","title":"Adaptation","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"The BPHs base their decisions on their internal states and on the vegetation cell's type and energy.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"The first input is their stage. Each stage links to specific actions. For example, BPH eggs can not move around. The second input is their countdowns. Their actions are timed by their countdowns. The third input is their energy. Their actions have energy-based conditions. The fourth input is the environment cell type and energy. These factors affect their movement, eating, and reproduction.","category":"page"},{"location":"50-model-description/#Prediction","page":"Model description","title":"Prediction","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"The BPHs agent implicitly predicts the amount of food available. Their prediction is presented in probabilities.  Their movement distribution is calculated from environment energy states. Their reproduction is also conditioned on the environment cell's energy.","category":"page"},{"location":"50-model-description/#Sensing","page":"Model description","title":"Sensing","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"The BPHs are able to sense their internal states. They can also sense the energy and type of nearby cells to make predictions and decisions. ","category":"page"},{"location":"50-model-description/#Interaction","page":"Model description","title":"Interaction","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"There are one direct interaction and two indirect ones.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"The direct one is that the BPHs feed off the cells with rice directly.  The indirect interactions are:","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"The cells eliminate the BPHs with the probability map. \nThe BPHs indirectly compete among themselves for food from the vegetation cells.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"We consider the former interaction indirect because the probability map was just emulating the natural enemies, which is not modeled in our model.","category":"page"},{"location":"50-model-description/#Stochasticity","page":"Model description","title":"Stochasticity","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"Stochasticity is used in the model mainly for the diversity of the results and to realistically model multi-option processes and to simplify complicated phenomena.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"The processes that use stochasticity are:","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"initial placement and population structure of BPHs,\nthe BPHs' growth,\nthe BPHs' reproduction,\nthe BPHs' movement.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"For reproducibility, we use a controlled pseudo-random number generator for all the stochastic processes in the model.","category":"page"},{"location":"50-model-description/#Observation","page":"Model description","title":"Observation","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"During our experiment, we collect the following data:","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"the percentage of healthy rice cells r_R,\nthe number of eggs n_E,\nthe number of nymphs n_N,\nthe number of adult macropterous n_M,\nthe number of adult brachypterous n_P,\nthe number of female nymphs and adults n_F.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"For the BPH-related data, we also calculate inferable data such as:","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"the total number of BPHs (eggs are not counted) n_A,\nthe percentage of nymphs r_N,\nthe percentage of adult macropterous r_M,\nthe percentage of adult brachypterous r_P,\nthe ratio of females over males r_F.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"We collect these data at each time step of the simulation. We use a function-like annotation to refer to the data point at a specific time step. For example, the number of eggs at the time t is n_E(t).","category":"page"},{"location":"50-model-description/#Initialisation","page":"Model description","title":"Initialisation","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"The initialization of the simulation includes several steps. The first step is to calculate the model states and initialize vegetation cells. The model state also creates a controlled random number generator. The second step is to initialize the BPH agents and place them inside the model. At the initialization of the model, we create the environment.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"warning: Warning\nTODO?","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"RiceBPH.Models.init_model","category":"page"},{"location":"50-model-description/#RiceBPH.Models.init_model","page":"Model description","title":"RiceBPH.Models.init_model","text":"init_model(; seed::Union{Int, Nothing} = Nothing, kwargs...)\n\nCreate and return a ABM model. Keyword arguments are passed to ModelParameters.\n\nAt the initialization of the model, inferable model properties are calculated to optimize the runtime of the simulation (see init_properties). This process also create the simulated environment and the vegetation cell state.\n\nAfter that, the BPH agents are initialized with random states. After the BPHs are initialized and placed inside the model, we collect the initial data of interest and store them in the model state.\n\n\n\n\n\n","category":"function"},{"location":"50-model-description/#Input-data","page":"Model description","title":"Input data","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"The model does not use any external data.","category":"page"},{"location":"50-model-description/#Submodels","page":"Model description","title":"Submodels","text":"","category":"section"},{"location":"50-model-description/#Notation","page":"Model description","title":"Notation","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"To make sure readers understand our model correctly, we will provide the notation system that we use in this material.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"We use index variables such as ijklldots to refer to the identification number of an agent. The state variable of an agent is referred to by their respective notation in Entities, state variables, and scales. For example, the energy of agent i is e_i.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"For vegetation cells, we use spatial coordinates (such as xy) to index them. Their state variables follow the same rule. For example, the energy of the rice cell at position x y is e_xy, the energy of the rice cell where the agent i at is e_x_i y_i.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"To abuse the notation, we hide the timestep variable and consider each submodel within its context (the \"current\" timestep). The state variable is updated in-place and the update is notated by gets. For example, when an agent consumes energy:","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"e_i gets e_i - E_C","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"We do not explicitly refer to the timestep t for several reasons. The main reason is that sometime, state variables are updated many times within a timestep, so it is not possible to use a timestep variable to describe the changes. Moreover, every submodel is described in its own context, therefore, the current time step is always t; adding the time step variable t does not make it easier to perceive the model (if not harder).","category":"page"},{"location":"50-model-description/#Model-parameters","page":"Model description","title":"Model parameters","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"The initialisation variables, parameters and states of the model are presented in the next table:","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"Variable Description Value\nS The environment grid size 125\nS_F The number of flower cells at the center of the grid 0\nN_I The number of initialized BPH 200\nP_0 The base elimination probability 0\n- The BPHs' initial positions Corner\nE_T The energy conversion from rice to BPHs 0032\nE_C The energy conversion from rice to BPHs E_T  3","category":"page"},{"location":"50-model-description/#Initialisation-actions","page":"Model description","title":"Initialisation actions","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"Since the vegetation cells are organized in a grid, we use matrices to represent the cells for efficiency. The coordinates of the vegetation cells translate directly to the matrix indices. Each of the other states is represented by a matrix.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"RiceBPH.Models.init_cell_types\nRiceBPH.Models.init_rice_map\nRiceBPH.Models.init_pr_eliminate\nRiceBPH.Models.init_bphs!","category":"page"},{"location":"50-model-description/#RiceBPH.Models.init_cell_types","page":"Model description","title":"RiceBPH.Models.init_cell_types","text":"init_cell_types(map_size::Integer, flower_width::Integer)\ninit_cell_types(S::Integer, S_F::Integer)\n\nReturns a CellType matrix. Rice cells' values are 1.  Flower cells' values are 0. The resulting matrix can be defined by:\n\nbeginequation\nleftt_xyright_S times S=left beginarraycl\n0  y_ale yle y_b\n1  textotherwise\nendarrayright \nendequation\n\nwhere y_a and y_b are auxilary variables defined by:\n\nbeginalign\ny_a  =leftlfloor fracS-S_F2rightrfloor +left(S+S_Fmod2right)+1\ny_b  =S+S_F-1\nendalign\n\nSee also: CellType.\n\n\n\n\n\n","category":"function"},{"location":"50-model-description/#RiceBPH.Models.init_rice_map","page":"Model description","title":"RiceBPH.Models.init_rice_map","text":"init_rice_map(S::Integer)\n\nReturns a matrix filled with 1 of size S times S.\n\nlefte_xyright_Stimes Sequiv1\n\nIn code terms, it's basically ones(Float32, S, S).\n\n\n\n\n\n","category":"function"},{"location":"50-model-description/#RiceBPH.Models.init_pr_eliminate","page":"Model description","title":"RiceBPH.Models.init_pr_eliminate","text":"init_pr_eliminate(init_pr::Float32, cell_types::Matrix{CellType})\n\nReturns Float32 matrix of elimination probability. The result matrix is defined by:\n\nleftp_xyright_Stimes S = P_0 times (1 - M))  G(sigma)\n\nwhere:\n\nG(sigma) is the Gaussian kernel,\nP_0 is the base elimination probability,\nM is the cell type matrix (see init_cell_types).\n\n\n\n\n\n","category":"function"},{"location":"50-model-description/#RiceBPH.Models.init_bphs!","page":"Model description","title":"RiceBPH.Models.init_bphs!","text":"init_bphs!(model)\n\nCreate N_I agents and put them in the model. The state variables of agent i are initialized as follows:\n\npositions x_i y_i: sampled from cumulative distribution mathrmPoi(600) with constraint x_i le 15 and y_i le 15 (see IP_MAX and IP_DST),\nenergy e_i: sampler from mathcalN(050 050),\ngender z^(g)_i: sample from {Male, Female} with weight {0.37, 0.63},\nform z^(f)_i: sample from {Brachy, Macro} with weight {0.47, 0.53},\nstage z^(s)_i: sample from {Egg, Nymph, Adult, Dead} with weight {0.33, 0.47, 0.20, 0.00},\nstage countdown t^(s)_i: derives from their other state variables,\nreproduction countdown t^(r)_i: is the preoviposition countdown if agent is not an adult, else the countdown is either preoviposition countdown or reproduction countdown with equal chances.\n\n\n\n\n\n","category":"function"},{"location":"50-model-description/#Vegetation-cell-submodels","page":"Model description","title":"Vegetation cell submodels","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"RiceBPH.Models.model_action_eliminate!","category":"page"},{"location":"50-model-description/#RiceBPH.Models.model_action_eliminate!","page":"Model description","title":"RiceBPH.Models.model_action_eliminate!","text":"model_action_eliminate!(model)\n\nEliminate BPHs base on their energy and the pr eliminate map. The elimination probability is given by  p_xy.\n\nFor each position x y, for each agent i whose position x_i = x y_i = y, the agent is removed from the simulation with the probability p_x y.\n\n\n\n\n\n","category":"function"},{"location":"50-model-description/#BPH-agent-submodels","page":"Model description","title":"BPH agent submodels","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"RiceBPH.Models.agent_action_growup!\nRiceBPH.Models.agent_action_move!\nRiceBPH.Models.agent_action_eat!\nRiceBPH.Models.agent_action_reproduce!\nRiceBPH.Models.agent_action_die!","category":"page"},{"location":"50-model-description/#RiceBPH.Models.agent_action_growup!","page":"Model description","title":"RiceBPH.Models.agent_action_growup!","text":"agent_action_growup!(agent, model)\n\nPerform the grow up action on agent with id i:\n\nThe stage countdown of the agent is decresed by one.\n\nbeginequation\nt_i^(s) gets t_i^(s) - 1\nendequation\n\nThe agent then consumes energy.\n\ne_i gets e_i - E_C\n\nIf stage countdown is greater than zero, end the action. Otherwise, get the next stage and sample the next stage countdown, assign the next stage and the next countdown to the agent. The next stage  z^(s)_i and next the stage countdown t^(s)_i is returned by get_next_stage.\n\n\n\n\n\n","category":"function"},{"location":"50-model-description/#RiceBPH.Models.agent_action_move!","page":"Model description","title":"RiceBPH.Models.agent_action_move!","text":"agent_action_move!(agent, model)\n\nPerform the move action of the agent:\n\nLet the agent's ID i, the agent's position on the grid x=x_i, y=y_i. The agent only moves under certain conditions, which are: energy is greater or equal to energy consumption\n\nbeginequation\ne_i ge E_T\nendequation\n\nor the cell that the agent is currently on is a rice cell and has zero energy:\n\nbeginequation\ne_x y = 0\nendequation\n\nor the cell type is flower:\n\nbeginequation\nt_x y = 0\nendequation\n\nIf the conditions are not met, stop the action. Otherwise, the agent then consumes energy:\n\nbeginequation\ne_i gets e_i - E_C\nendequation\n\nAfter that, a direction Delta x Delta y is sampled within the radius of 2 cells (approximately 30cm) with weights. The weight of the moving direction is calculated by\n\nbeginequation\nw_Delta xDelta y=begincases\ne_x+Delta xy+Delta y  t_x+Delta xy+Delta y=1\n05  t_x+Delta xy+Delta y=0\nendcases\nendequation\n\nAfter a direction is sampled, the agent then moves along the sampled direction\n\nbeginalign\nx_i gets x_i + Delta x\ny_i gets y_i + Delta y\nendalign\n\n\n\n\n\n","category":"function"},{"location":"50-model-description/#RiceBPH.Models.agent_action_eat!","page":"Model description","title":"RiceBPH.Models.agent_action_eat!","text":"agent_action_eat!(agent, model)\n\nPerform eat action of agent.\n\nFirst, check if the current cell is a FlowerCell, if it is, stop the action.\n\nAn amount of energy is subtracted from the RiceCell x_iy_i and added to the agent i.\n\nbeginalign\ne_x_i y_i gets e_x_iy_i - Delta  e\ne_i gets e_i + Delta  e\nendalign\n\nwhere the transfered energy Delta e is calculated by\n\nbeginequation\nDelta  e=minleft(1-e_ie_x_iy_ie_Tright)\nendequation\n\n\n\n\n\n","category":"function"},{"location":"50-model-description/#RiceBPH.Models.agent_action_reproduce!","page":"Model description","title":"RiceBPH.Models.agent_action_reproduce!","text":"agent_action_reproduce!(agent, model)\n\nPerform the reproductive action of agent i.\n\nFirst, decrease the reproduction countdown of the agent i.\n\nbeginequation\nt^(p)_i gets t^(p)_i - 1\nendequation\n\nAfter that, check for the reproduction conditions: the agent is a female,\n\nbeginequation\nz^(g)_i = 1\nendequation\n\nthe agent energy is larger or equals than the energy consumption\n\nbeginequation\ne_i ge E_C\nendequation\n\nthe reproduction countdown is zero:\n\nt^(p) = 0\n\nthe energy of rice cell at agent position is greater than the energy transfer parameter:\n\ne_x_i y_i ge E_T\n\nIf the condition is met, the number of offsprings N from the distributions of offspring quantity mathcalN(850 350).\n\nFor k=overline1 N, the offspring agent k is initialized with:\n\nenergy the same as their parent: e_k gets e_i,\nthe position of the parent x_k gets x_i, y_k gets y_i,\nstage is egg: z^(s)_k gets 0,\nstage countdown is of egg: t^(s)_k getsmathcalN(22800 8400),\ngender z^(g)_k: sample from {Male, Female} with weight {0.37, 0.63},\nform z^(f)_k: sample from {Brachy, Macro} with weight {0.47, 0.53},\nreproduction countdown follows the preoviposition distribution (which depends on the form).\n\nThe reproduction countdown is initialized with preoviposition so that when the agent's reproduction is enabled, it automatically enters the preoviposition.\n\nAfter reproducing, the mother agent i consume energy and get a new reproduction count down:\n\nbeginalign\nt_i^left(rright) gets t^left(rright)left(z_i^left(fright)right)\ne_i gets e_i-E_C\nendalign\n\nSee also: get_preoviposition_countdown, get_reproduction_countdown.\n\n\n\n\n\n","category":"function"},{"location":"50-model-description/#RiceBPH.Models.agent_action_die!","page":"Model description","title":"RiceBPH.Models.agent_action_die!","text":"agent_action_die!(agent, model)\n\nCheck if the agent should be eliminated from the simulation.\n\nThe agent i dies and gets removed from the simulated if either: its energy is zero or less (e_i le 0), or its stage is \"Dead\" (z^(s)_i = 3).\n\nSee also: Stage.\n\n\n\n\n\n","category":"function"},{"location":"50-model-description/#Reproduction-parameters","page":"Model description","title":"Reproduction parameters","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"RiceBPH.Models.Form\nRiceBPH.Models.get_reproduction_countdown\nRiceBPH.Models.get_preoviposition_countdown","category":"page"},{"location":"50-model-description/#RiceBPH.Models.Form","page":"Model description","title":"RiceBPH.Models.Form","text":"The form of BPH agent. This enum is Bool based.\n\nValue Bool Description\nBrachy false The truncate-winged form\nMacro true The fully-winged form\n\n\n\n\n\n","category":"type"},{"location":"50-model-description/#RiceBPH.Models.get_reproduction_countdown","page":"Model description","title":"RiceBPH.Models.get_reproduction_countdown","text":"get_reproduction_countdown(form::Form)\n\nReturn the reproduction countdown distribution depends on the agents' form.\n\n\n\n\n\nMacropterous's reproduction countdown distribution is mathcalN(2253 928).\n\n\n\n\n\nBrachypterous's reproduction countdown distribution is mathcalN(1526 629).\n\n\n\n\n\n","category":"function"},{"location":"50-model-description/#RiceBPH.Models.get_preoviposition_countdown","page":"Model description","title":"RiceBPH.Models.get_preoviposition_countdown","text":"get_preoviposition_countdown(form::Form)\n\nReturn the first-reproduction countdown distribution depends on the agents' form.\n\n\n\n\n\nMacropterous's preoviposition distribution is mathcalN(17760 7200).\n\n\n\n\n\nBrachypterous's preoviposition distribution is mathcalN(9120 7200).\n\n\n\n\n\n","category":"function"},{"location":"50-model-description/#Age-structure","page":"Model description","title":"Age structure","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"RiceBPH.Models.Stage\nRiceBPH.Models.get_stage_countdown\nRiceBPH.Models.get_next_stage","category":"page"},{"location":"50-model-description/#RiceBPH.Models.Stage","page":"Model description","title":"RiceBPH.Models.Stage","text":"Stages of BPHs agent, represented by a Int8 value. The stages are:\n\nStage Value Represents\nEgg 0 BPH's eggs\nNymph 1 BPHs in nymph stage\nAdult 2 BPHs in adult stage\nDead 3 BPHs in adult stage but their time runs out\n\nAgents with Dead stage will be removed at the end of their step. See also: get_next_stage\n\n\n\n\n\n","category":"type"},{"location":"50-model-description/#RiceBPH.Models.get_stage_countdown","page":"Model description","title":"RiceBPH.Models.get_stage_countdown","text":"get_stage_countdown(stage::Stage, gender::Gender, form::Form)\n\nReturn the count down to the next stage of stage, depends on the gender and form of the agent.\n\n\n\n\n\nEggs' stage countdown distribution: mathcalN(22800 8400).\n\n\n\n\n\nFemale nymphs' stage countdown distribution: mathcalN(32400 6000).\n\n\n\n\n\nMale nymphs' stage countdown distribution: mathcalN(33600 2400).\n\n\n\n\n\nMale adults' stage countdown distribution: mathcalN(27600 1200).\n\n\n\n\n\nFemale macropterous adults' stage countdown distribution: mathcalN(66000 1200).\n\n\n\n\n\nFemale brachypterous adults' stage countdown distribution: mathcalN(54000 1200).\n\n\n\n\n\nDead stage is just a pending removal at the end of the simulation step, therefore the countdown distribution is just the set 9999.\n\n\n\n\n\n","category":"function"},{"location":"50-model-description/#RiceBPH.Models.get_next_stage","page":"Model description","title":"RiceBPH.Models.get_next_stage","text":"get_next_stage(stage::Stage)\n\nReturn the next age structure of stage. See also Stage.\n\n\n\n\n\nThe stage after Egg is Nymph.\n\n\n\n\n\nThe stage after Nymph is Adult.\n\n\n\n\n\nThe stage after Adult is Dead.\n\n\n\n\n\n","category":"function"},{"location":"50-model-description/#Data-collection","page":"Model description","title":"Data collection","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"danger: Danger\nThis is unfinished documentation.","category":"page"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"RiceBPH.Models.model_action_summarize!","category":"page"},{"location":"50-model-description/#RiceBPH.Models.model_action_summarize!","page":"Model description","title":"RiceBPH.Models.model_action_summarize!","text":"model_action_summarize!(model)\n\nCollect agent and rice statistics and save them in model properties. The collected is the percentage of healthy rice r_R and the number of BPHs, matching stages, forms and genders.\n\nMetric Description\nr_R Percentage of healthy rice\nn_E Number of eggs\nn_N Number of nymphs\nn_M Number of adults with fully-winged form\nn_B Number of adults with truncate-winged form\nn_B Number of females\n\nThese metrics are calculated as follow:\n\nbeginalign\nr_R  =fracleftleft left(xyright)colon t_xy=1land e_xyge05right rightleftleft left(xyright)colon t_xy=1right right\nn_E  =leftleft icolon z_i^left(sright)=0right right\nn_N  =leftleft icolon z_i^left(sright)=1right right\nn_M  =leftleft icolon z_i^left(sright)=2land z_i^left(tright)=0right right\nn_B  =leftleft icolon z_i^left(sright)=2land z_i^left(tright)=1right right\nn_F  =leftleft icolon z_i^left(sright)ne0land z_i^left(gright)=1right right\nendalign\n\n\n\n\n\n","category":"function"},{"location":"50-model-description/#Bibliography","page":"Model description","title":"Bibliography","text":"","category":"section"},{"location":"50-model-description/","page":"Model description","title":"Model description","text":"","category":"page"},{"location":"99-api/","page":"API Reference","title":"API Reference","text":"using RiceBPH\nusing RiceBPH.Models","category":"page"},{"location":"99-api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"99-api/#Model-module","page":"API Reference","title":"Model module","text":"","category":"section"},{"location":"99-api/","page":"API Reference","title":"API Reference","text":"Modules = [RiceBPH.Models]\nOrder   = [:function, :type]","category":"page"},{"location":"99-api/#RiceBPH.Models.agent_action_die!-Tuple{Any, Any}","page":"API Reference","title":"RiceBPH.Models.agent_action_die!","text":"agent_action_die!(agent, model)\n\nCheck if the agent should be eliminated from the simulation.\n\nThe agent i dies and gets removed from the simulated if either: its energy is zero or less (e_i le 0), or its stage is \"Dead\" (z^(s)_i = 3).\n\nSee also: Stage.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.agent_action_eat!-Tuple{Any, Any}","page":"API Reference","title":"RiceBPH.Models.agent_action_eat!","text":"agent_action_eat!(agent, model)\n\nPerform eat action of agent.\n\nFirst, check if the current cell is a FlowerCell, if it is, stop the action.\n\nAn amount of energy is subtracted from the RiceCell x_iy_i and added to the agent i.\n\nbeginalign\ne_x_i y_i gets e_x_iy_i - Delta  e\ne_i gets e_i + Delta  e\nendalign\n\nwhere the transfered energy Delta e is calculated by\n\nbeginequation\nDelta  e=minleft(1-e_ie_x_iy_ie_Tright)\nendequation\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.agent_action_growup!-Tuple{Any, Any}","page":"API Reference","title":"RiceBPH.Models.agent_action_growup!","text":"agent_action_growup!(agent, model)\n\nPerform the grow up action on agent with id i:\n\nThe stage countdown of the agent is decresed by one.\n\nbeginequation\nt_i^(s) gets t_i^(s) - 1\nendequation\n\nThe agent then consumes energy.\n\ne_i gets e_i - E_C\n\nIf stage countdown is greater than zero, end the action. Otherwise, get the next stage and sample the next stage countdown, assign the next stage and the next countdown to the agent. The next stage  z^(s)_i and next the stage countdown t^(s)_i is returned by get_next_stage.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.agent_action_move!-Tuple{Any, Any}","page":"API Reference","title":"RiceBPH.Models.agent_action_move!","text":"agent_action_move!(agent, model)\n\nPerform the move action of the agent:\n\nLet the agent's ID i, the agent's position on the grid x=x_i, y=y_i. The agent only moves under certain conditions, which are: energy is greater or equal to energy consumption\n\nbeginequation\ne_i ge E_T\nendequation\n\nor the cell that the agent is currently on is a rice cell and has zero energy:\n\nbeginequation\ne_x y = 0\nendequation\n\nor the cell type is flower:\n\nbeginequation\nt_x y = 0\nendequation\n\nIf the conditions are not met, stop the action. Otherwise, the agent then consumes energy:\n\nbeginequation\ne_i gets e_i - E_C\nendequation\n\nAfter that, a direction Delta x Delta y is sampled within the radius of 2 cells (approximately 30cm) with weights. The weight of the moving direction is calculated by\n\nbeginequation\nw_Delta xDelta y=begincases\ne_x+Delta xy+Delta y  t_x+Delta xy+Delta y=1\n05  t_x+Delta xy+Delta y=0\nendcases\nendequation\n\nAfter a direction is sampled, the agent then moves along the sampled direction\n\nbeginalign\nx_i gets x_i + Delta x\ny_i gets y_i + Delta y\nendalign\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.agent_action_reproduce!-Tuple{Any, Any}","page":"API Reference","title":"RiceBPH.Models.agent_action_reproduce!","text":"agent_action_reproduce!(agent, model)\n\nPerform the reproductive action of agent i.\n\nFirst, decrease the reproduction countdown of the agent i.\n\nbeginequation\nt^(p)_i gets t^(p)_i - 1\nendequation\n\nAfter that, check for the reproduction conditions: the agent is a female,\n\nbeginequation\nz^(g)_i = 1\nendequation\n\nthe agent energy is larger or equals than the energy consumption\n\nbeginequation\ne_i ge E_C\nendequation\n\nthe reproduction countdown is zero:\n\nt^(p) = 0\n\nthe energy of rice cell at agent position is greater than the energy transfer parameter:\n\ne_x_i y_i ge E_T\n\nIf the condition is met, the number of offsprings N from the distributions of offspring quantity mathcalN(850 350).\n\nFor k=overline1 N, the offspring agent k is initialized with:\n\nenergy the same as their parent: e_k gets e_i,\nthe position of the parent x_k gets x_i, y_k gets y_i,\nstage is egg: z^(s)_k gets 0,\nstage countdown is of egg: t^(s)_k getsmathcalN(22800 8400),\ngender z^(g)_k: sample from {Male, Female} with weight {0.37, 0.63},\nform z^(f)_k: sample from {Brachy, Macro} with weight {0.47, 0.53},\nreproduction countdown follows the preoviposition distribution (which depends on the form).\n\nThe reproduction countdown is initialized with preoviposition so that when the agent's reproduction is enabled, it automatically enters the preoviposition.\n\nAfter reproducing, the mother agent i consume energy and get a new reproduction count down:\n\nbeginalign\nt_i^left(rright) gets t^left(rright)left(z_i^left(fright)right)\ne_i gets e_i-E_C\nendalign\n\nSee also: get_preoviposition_countdown, get_reproduction_countdown.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.agent_step!-Tuple{Any, Any}","page":"API Reference","title":"RiceBPH.Models.agent_step!","text":"agent_step!(agent, model)\n\nPerform agent actions in step, actions are determined by their stages. Each stage's actions is defined in its respective step function.\n\neggs: agent_step_egg!\nnymphs: agent_step_nymph!\nadults: agent_step_adult!\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.agent_step_adult!-Tuple{Any, Any}","page":"API Reference","title":"RiceBPH.Models.agent_step_adult!","text":"agent_step_adult!(agent, model)\n\nThe adult BPHs have the following actions (performed in order):\n\nagent_action_growup!\nagent_action_move!\nagent_action_eat!\nagent_action_reproduce!\nagent_action_die!\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.agent_step_egg!-Tuple{Any, Any}","page":"API Reference","title":"RiceBPH.Models.agent_step_egg!","text":"agent_step_egg!(agent, model)\n\nThe eggs have the following actions (performed in order):\n\nagent_action_growup!\nagent_action_die!\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.agent_step_nymph!-Tuple{Any, Any}","page":"API Reference","title":"RiceBPH.Models.agent_step_nymph!","text":"agent_step_nymph!(agent, model)\n\nThe nymphs have the following actions (performed in order):\n\nagent_action_growup!\nagent_action_move!\nagent_action_eat!\nagent_action_die!\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.get_next_stage-Tuple{RiceBPH.Models.Stage}","page":"API Reference","title":"RiceBPH.Models.get_next_stage","text":"get_next_stage(stage::Stage)\n\nReturn the next age structure of stage. See also Stage.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.get_next_stage-Tuple{Val{RiceBPH.Models.Adult}}","page":"API Reference","title":"RiceBPH.Models.get_next_stage","text":"The stage after Adult is Dead.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.get_next_stage-Tuple{Val{RiceBPH.Models.Egg}}","page":"API Reference","title":"RiceBPH.Models.get_next_stage","text":"The stage after Egg is Nymph.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.get_next_stage-Tuple{Val{RiceBPH.Models.Nymph}}","page":"API Reference","title":"RiceBPH.Models.get_next_stage","text":"The stage after Nymph is Adult.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.get_preoviposition_countdown-Tuple{RiceBPH.Models.Form}","page":"API Reference","title":"RiceBPH.Models.get_preoviposition_countdown","text":"get_preoviposition_countdown(form::Form)\n\nReturn the first-reproduction countdown distribution depends on the agents' form.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.get_preoviposition_countdown-Tuple{Val{RiceBPH.Models.Brachy}}","page":"API Reference","title":"RiceBPH.Models.get_preoviposition_countdown","text":"Brachypterous's preoviposition distribution is mathcalN(9120 7200).\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.get_preoviposition_countdown-Tuple{Val{RiceBPH.Models.Macro}}","page":"API Reference","title":"RiceBPH.Models.get_preoviposition_countdown","text":"Macropterous's preoviposition distribution is mathcalN(17760 7200).\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.get_reproduction_countdown-Tuple{RiceBPH.Models.Form}","page":"API Reference","title":"RiceBPH.Models.get_reproduction_countdown","text":"get_reproduction_countdown(form::Form)\n\nReturn the reproduction countdown distribution depends on the agents' form.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.get_reproduction_countdown-Tuple{Val{RiceBPH.Models.Brachy}}","page":"API Reference","title":"RiceBPH.Models.get_reproduction_countdown","text":"Brachypterous's reproduction countdown distribution is mathcalN(1526 629).\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.get_reproduction_countdown-Tuple{Val{RiceBPH.Models.Macro}}","page":"API Reference","title":"RiceBPH.Models.get_reproduction_countdown","text":"Macropterous's reproduction countdown distribution is mathcalN(2253 928).\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.get_stage_countdown-Tuple{RiceBPH.Models.Stage, RiceBPH.Models.Gender, RiceBPH.Models.Form}","page":"API Reference","title":"RiceBPH.Models.get_stage_countdown","text":"get_stage_countdown(stage::Stage, gender::Gender, form::Form)\n\nReturn the count down to the next stage of stage, depends on the gender and form of the agent.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.get_stage_countdown-Tuple{Val{RiceBPH.Models.Adult}, Val{RiceBPH.Models.Female}, Val{RiceBPH.Models.Brachy}}","page":"API Reference","title":"RiceBPH.Models.get_stage_countdown","text":"Female brachypterous adults' stage countdown distribution: mathcalN(54000 1200).\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.get_stage_countdown-Tuple{Val{RiceBPH.Models.Adult}, Val{RiceBPH.Models.Female}, Val{RiceBPH.Models.Macro}}","page":"API Reference","title":"RiceBPH.Models.get_stage_countdown","text":"Female macropterous adults' stage countdown distribution: mathcalN(66000 1200).\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.get_stage_countdown-Tuple{Val{RiceBPH.Models.Adult}, Val{RiceBPH.Models.Male}, Any}","page":"API Reference","title":"RiceBPH.Models.get_stage_countdown","text":"Male adults' stage countdown distribution: mathcalN(27600 1200).\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.get_stage_countdown-Tuple{Val{RiceBPH.Models.Dead}, Any, Any}","page":"API Reference","title":"RiceBPH.Models.get_stage_countdown","text":"Dead stage is just a pending removal at the end of the simulation step, therefore the countdown distribution is just the set 9999.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.get_stage_countdown-Tuple{Val{RiceBPH.Models.Egg}, Any, Any}","page":"API Reference","title":"RiceBPH.Models.get_stage_countdown","text":"Eggs' stage countdown distribution: mathcalN(22800 8400).\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.get_stage_countdown-Tuple{Val{RiceBPH.Models.Nymph}, Val{RiceBPH.Models.Female}, Any}","page":"API Reference","title":"RiceBPH.Models.get_stage_countdown","text":"Female nymphs' stage countdown distribution: mathcalN(32400 6000).\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.get_stage_countdown-Tuple{Val{RiceBPH.Models.Nymph}, Val{RiceBPH.Models.Male}, Any}","page":"API Reference","title":"RiceBPH.Models.get_stage_countdown","text":"Male nymphs' stage countdown distribution: mathcalN(33600 2400).\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.init_bphs!-Tuple{Any}","page":"API Reference","title":"RiceBPH.Models.init_bphs!","text":"init_bphs!(model)\n\nCreate N_I agents and put them in the model. The state variables of agent i are initialized as follows:\n\npositions x_i y_i: sampled from cumulative distribution mathrmPoi(600) with constraint x_i le 15 and y_i le 15 (see IP_MAX and IP_DST),\nenergy e_i: sampler from mathcalN(050 050),\ngender z^(g)_i: sample from {Male, Female} with weight {0.37, 0.63},\nform z^(f)_i: sample from {Brachy, Macro} with weight {0.47, 0.53},\nstage z^(s)_i: sample from {Egg, Nymph, Adult, Dead} with weight {0.33, 0.47, 0.20, 0.00},\nstage countdown t^(s)_i: derives from their other state variables,\nreproduction countdown t^(r)_i: is the preoviposition countdown if agent is not an adult, else the countdown is either preoviposition countdown or reproduction countdown with equal chances.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.init_cell_types-Tuple{Integer, Integer}","page":"API Reference","title":"RiceBPH.Models.init_cell_types","text":"init_cell_types(map_size::Integer, flower_width::Integer)\ninit_cell_types(S::Integer, S_F::Integer)\n\nReturns a CellType matrix. Rice cells' values are 1.  Flower cells' values are 0. The resulting matrix can be defined by:\n\nbeginequation\nleftt_xyright_S times S=left beginarraycl\n0  y_ale yle y_b\n1  textotherwise\nendarrayright \nendequation\n\nwhere y_a and y_b are auxilary variables defined by:\n\nbeginalign\ny_a  =leftlfloor fracS-S_F2rightrfloor +left(S+S_Fmod2right)+1\ny_b  =S+S_F-1\nendalign\n\nSee also: CellType.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.init_model-Tuple{}","page":"API Reference","title":"RiceBPH.Models.init_model","text":"init_model(; seed::Union{Int, Nothing} = Nothing, kwargs...)\n\nCreate and return a ABM model. Keyword arguments are passed to ModelParameters.\n\nAt the initialization of the model, inferable model properties are calculated to optimize the runtime of the simulation (see init_properties). This process also create the simulated environment and the vegetation cell state.\n\nAfter that, the BPH agents are initialized with random states. After the BPHs are initialized and placed inside the model, we collect the initial data of interest and store them in the model state.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.init_positions-Tuple{Any, RiceBPH.Models.InitPosition, Integer, Integer}","page":"API Reference","title":"RiceBPH.Models.init_positions","text":"init_positions(rng, position::InitPosition, num_bphs::Integer, map_size::Integer)\n\nReturn an iterator over all the initial positions.\n\nSee also: IP_PTS, IP_DST, InitPosition.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.init_pr_eliminate-Tuple{Float32, Matrix{RiceBPH.Models.CellType}}","page":"API Reference","title":"RiceBPH.Models.init_pr_eliminate","text":"init_pr_eliminate(init_pr::Float32, cell_types::Matrix{CellType})\n\nReturns Float32 matrix of elimination probability. The result matrix is defined by:\n\nleftp_xyright_Stimes S = P_0 times (1 - M))  G(sigma)\n\nwhere:\n\nG(sigma) is the Gaussian kernel,\nP_0 is the base elimination probability,\nM is the cell type matrix (see init_cell_types).\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.init_properties-Tuple{RiceBPH.Models.ModelParameters, Int64}","page":"API Reference","title":"RiceBPH.Models.init_properties","text":"init_properties(parameters::ModelParameters)\n\nConstruct a ModelProperties from ModelParameters.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.init_rice_map-Tuple{Integer}","page":"API Reference","title":"RiceBPH.Models.init_rice_map","text":"init_rice_map(S::Integer)\n\nReturns a matrix filled with 1 of size S times S.\n\nlefte_xyright_Stimes Sequiv1\n\nIn code terms, it's basically ones(Float32, S, S).\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.model_action_eliminate!-Tuple{Any}","page":"API Reference","title":"RiceBPH.Models.model_action_eliminate!","text":"model_action_eliminate!(model)\n\nEliminate BPHs base on their energy and the pr eliminate map. The elimination probability is given by  p_xy.\n\nFor each position x y, for each agent i whose position x_i = x y_i = y, the agent is removed from the simulation with the probability p_x y.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.model_action_summarize!-Tuple{Any}","page":"API Reference","title":"RiceBPH.Models.model_action_summarize!","text":"model_action_summarize!(model)\n\nCollect agent and rice statistics and save them in model properties. The collected is the percentage of healthy rice r_R and the number of BPHs, matching stages, forms and genders.\n\nMetric Description\nr_R Percentage of healthy rice\nn_E Number of eggs\nn_N Number of nymphs\nn_M Number of adults with fully-winged form\nn_B Number of adults with truncate-winged form\nn_B Number of females\n\nThese metrics are calculated as follow:\n\nbeginalign\nr_R  =fracleftleft left(xyright)colon t_xy=1land e_xyge05right rightleftleft left(xyright)colon t_xy=1right right\nn_E  =leftleft icolon z_i^left(sright)=0right right\nn_N  =leftleft icolon z_i^left(sright)=1right right\nn_M  =leftleft icolon z_i^left(sright)=2land z_i^left(tright)=0right right\nn_B  =leftleft icolon z_i^left(sright)=2land z_i^left(tright)=1right right\nn_F  =leftleft icolon z_i^left(sright)ne0land z_i^left(gright)=1right right\nendalign\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.model_step!-Tuple{Any}","page":"API Reference","title":"RiceBPH.Models.model_step!","text":"model_step!(model)\n\nModel behaviour in one step, which includes:\n\nmodel_action_eliminate!\nmodel_action_summarize!\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.normal_hour_range-Tuple{Any, Any}","page":"API Reference","title":"RiceBPH.Models.normal_hour_range","text":"normal_hour_range(a, b)\n\nReturn normal_range(a, b; mul=24). See normal_range for details.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.normal_range-Tuple{Any, Any}","page":"API Reference","title":"RiceBPH.Models.normal_range","text":"normal_range(a, b; mul=1)\n\nReturn a Normal distribution with mean mu and standard deviation sigma determined by:\n\nbeginalign\na  =mu-sigma\nb  =mu+sigma\nendalign\n\nThe found mean and standard deviation is scaled by mul variable to obtain the final mean and deviation.\n\nbeginalign\nmu = mu cdot mathrmmul \nsigma = sigma cdot mathrmmul\nendalign\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.normalize-Tuple{Any}","page":"API Reference","title":"RiceBPH.Models.normalize","text":"normalize(v)\n\nReturn a probability vector v with v as the Weight:\n\nv = fracvsum_i v_i\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.show_dist-Tuple{Distributions.Normal}","page":"API Reference","title":"RiceBPH.Models.show_dist","text":"show_dist(d)\n\nReturn LaTeX string for normal distribution.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.show_dist-Tuple{Distributions.Poisson}","page":"API Reference","title":"RiceBPH.Models.show_dist","text":"show_dist(d)\n\nReturn LaTeX string for poisson distribution.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.show_dist-Tuple{StatsBase.Weights}","page":"API Reference","title":"RiceBPH.Models.show_dist","text":"show_dist(w)\n\nReturn LaTeX string for weight vectors.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.show_enum-Tuple{Any}","page":"API Reference","title":"RiceBPH.Models.show_enum","text":"show_enum(enum)\n\nReturn string format for enum\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Models.BPH","page":"API Reference","title":"RiceBPH.Models.BPH","text":"The BPH agents, with the following state variables.\n\nVariable Type Description\nid Int The agent identifier number\npos Dims{2} The agent's position on the environment grid\nenergy Float16 The agent's energy\ngender Gender The agent's gender\nform Form The agent's form\nstage Stage The agent's current stage\nstage_cd Int16 The countdown to agent's next stage\nreproduction_cd Int16 The countdown to agent's next reproduction\n\n\n\n\n\n","category":"type"},{"location":"99-api/#RiceBPH.Models.CellType","page":"API Reference","title":"RiceBPH.Models.CellType","text":"The enum CellType is based on Bool values, indicates a cell is a rice cell or flower cell:\n\nValue Bool Int\nFlowerCell false 0\nRiceCell true 1\n\n\n\n\n\n","category":"type"},{"location":"99-api/#RiceBPH.Models.Gender","page":"API Reference","title":"RiceBPH.Models.Gender","text":"The gender of BPH agent. This enum is Bool based.\n\nValue Int Bool\nMale 0 false\nFemale 1 true\n\n\n\n\n\n","category":"type"},{"location":"99-api/#RiceBPH.Models.InitPosition","page":"API Reference","title":"RiceBPH.Models.InitPosition","text":"BPH Initialization position.\n\nValue Description\nCorner 1meters at a corner of the map\nBorder 1 meters along a border of the map, the border does not overlap with flower\n\nSee also IP_DST.\n\n\n\n\n\n","category":"type"},{"location":"99-api/#RiceBPH.Models.ModelParameters","page":"API Reference","title":"RiceBPH.Models.ModelParameters","text":"ModelParameters contains initialization variables.\n\nVariable Type Default Description Symbol\nmap_size Int - The environment grid size S\nflower_width Int - The number of flower cells at the center of the grid S_F\ninit_num_bphs Int - The number of initialized BPH N_I\ninit_pr_eliminate Float32 - The base elimination probability P_0\ninit_position InitPosition Corner The BPHs' initial positions -\nenergy_transfer Float32 0.032 The energy conversion from rice to BPHs. E_T\n\n\n\n\n\n","category":"type"},{"location":"99-api/#RiceBPH.Models.ModelProperties","page":"API Reference","title":"RiceBPH.Models.ModelProperties","text":"Model properties. There are three types of properties:\n\nModel state\nThe first types are properties that are inferred from the input variables to be used during the simulation.\nThe second types are properties to collect statistics during the simulations.\n\nProperties (except num_rice_cells) those are used to collect model statistics has the name prefix .\n\nModel states and inferable parameters:\n\nName Type Description Symbol\nparameters ModelParameters The initialisation parameter -\nrice_map Matrix{Float32} The matrix e_xy_stimes s of rice cells' energy -\npr_eliminate_map Matrix{Float32} The matrix of elimination probabilities at each grid position -\ncell_types Matrix{CellType} The matrix contains the cell type of each grid position -\neliminate_positions Vector{CartesianIndex} Grid positions with elimination probability p_xy  0 -\nrice_positions Vector{CartesianIndex} The positions of RiceCell. -\nnum_rice_cells Int Total number of rice cells, equals to S^2 -\nenergy_consume Float32 The energy consumption E_C of BPH agents E_C\nmoving_directions Vector{Tuple{Int, Int}} All the possible moving directions -\n\nThe energy consumption E_C is calculated by dividing the energy transfer E_T to all the energy-consuming actions (agent_action_move!, agent_action_reproduce!, agent_action_growup!):\n\nbeginequation\nE_C = fracE_Tmathrmnumber of actions = fracE_T3\nbeginequation\n\nStatistics\n\nThese data are collected at each time step, see also model_action_summarize!.\n\nName Type Description Symbol\npct_rices Float32 Percentage of healty rice r_R\nnum_eggs Int Number of BPH eggs n_E\nnum_nymphs Int Number of BPH in nymphs stage n_N\nnum_brachys Int Number of BPH in adult stage, truncate-winged form n_B\nnum_macros Int Number of BPH in adult stage, fully-winged form n_M\nnum_females Int Number of female BPHs, counting nymphs and adults n_F\n\n\n\n\n\n","category":"type"},{"location":"99-api/#Results-module","page":"API Reference","title":"Results module","text":"","category":"section"},{"location":"99-api/","page":"API Reference","title":"API Reference","text":"Modules = [RiceBPH.Results, RiceBPH.OFAAT]\nOrder   = [:function]","category":"page"},{"location":"99-api/#Base.isvalid-Tuple{Real}","page":"API Reference","title":"Base.isvalid","text":"Base.isvalid(x::Real)\n\nThe isvalid function checks whether a given floating-point number x is valid, i.e., it is neither NaN nor infinite.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Results.dropnan-Tuple{Any}","page":"API Reference","title":"RiceBPH.Results.dropnan","text":"dropnan(df)\n\nRemove rows with NaN from dataframe, returns a subdataframe.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Results.fit_fn-NTuple{4, Any}","page":"API Reference","title":"RiceBPH.Results.fit_fn","text":"\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Results.get_data_names-Tuple{Any}","page":"API Reference","title":"RiceBPH.Results.get_data_names","text":"get_data_names(df::DataFrame)\n\nReturn a vector of the names of the data columns.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Results.get_factor_name-Tuple{Any}","page":"API Reference","title":"RiceBPH.Results.get_factor_name","text":"get_factor_name(df::DataFrame)::Symbol\n\nReturn the variable factor from the OFAAT result.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Results.get_stable_bph_timesteps-Tuple{Vector}","page":"API Reference","title":"RiceBPH.Results.get_stable_bph_timesteps","text":"get_stable_bph_timesteps(num_bphs)\n\nReturn a range of timesteps where the population of BPHs is stable. This time period is defined as a week before the BPH population peak.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Results.get_stats-Tuple{Any}","page":"API Reference","title":"RiceBPH.Results.get_stats","text":"get_stats(df)\n\nGet statistics over all replications of each parameter from the OFAAT result.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Results.infer_stats!-Tuple{Any}","page":"API Reference","title":"RiceBPH.Results.infer_stats!","text":"infer_stats!(df:DataFrame)\n\nCalculate inferable statistics from the result dataframe. Return the data frame. This function is inplace. The inferable statistics are:\n\nnum_bphs: total number of BPHs\npct_nymphs: percentage of nymphs\npct_macros: percentage of macros\npct_bracys: percentage of bracys\npct_females percentage of females BPH\npct_males: percentage of males BPH\n\nEggs are not counted in the calculations.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Results.load-Tuple{Any}","page":"API Reference","title":"RiceBPH.Results.load","text":"load(path_to_jdf_folder)\n\nLoad the result, apply some inference on the results (to get extra statistics). Return the a dataframe of the results.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Results.mask_nonconverge-Tuple{Any}","page":"API Reference","title":"RiceBPH.Results.mask_nonconverge","text":"masknonconverge(fitdf)\n\nChange the row which is not converged to NaN.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.Results.qcv-Tuple{Any}","page":"API Reference","title":"RiceBPH.Results.qcv","text":"function qcv(x)\n\nThe qcv function calculates the coefficient of dispersion (CD) for a given dataset x using the interquartile range (IQR).\n\nParameters\n\nx: An array or collection of numerical values representing the dataset for which the CD is to be calculated.\n\nReturns\n\nThe function returns a single floating-point value representing the coefficient of dispersion (CD) of the dataset.\n\nDescription\n\nThe coefficient of dispersion (CD) is a measure of the relative variability or dispersion of a dataset. It is calculated as the absolute difference between the first quartile (Q1) and the third quartile (Q3), divided by their sum.\n\nThe qcv function calculates the CD by first computing the first quartile q1 and the third quartile q3 using the quantile function from the Statistics module. The quantile function returns the value that corresponds to the given quantile of the dataset. In this case, q1 represents the 25th percentile (Q1), and q3 represents the 75th percentile (Q3).\n\nThe CD is then computed as the absolute difference between q3 and q1, divided by their sum.\n\nExample Usage\n\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncd = qcv(data)\nprintln(\"Coefficient of Dispersion: \", cd)\n\nNote\n\nThe quantile function used in the qcv function assumes the default values for the beta and alpha parameters, which correspond to the definitions of the quartiles used in traditional statistics. However, these parameters can be adjusted if desired.\nThe qcv function assumes that the input dataset x is numeric. Providing non-numeric values may result in unexpected behavior or errors.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.OFAAT.run_ofaat!-Tuple{Integer, Integer, Symbol, Any}","page":"API Reference","title":"RiceBPH.OFAAT.run_ofaat!","text":"run_ofaat!(num_steps, num_reps, factor, values; kw...)\n\nRun one-factor-at-a-time replication experiment. Return the combined dataframe created by concatnating the result dataframes from all the replication. This function is the same as paramscan from Agents.jl, but paramscan does not do garbage collection, this one does to prevent out of memory error.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#RiceBPH.OFAAT.run_replicate!-NTuple{5, Any}","page":"API Reference","title":"RiceBPH.OFAAT.run_replicate!","text":"run_replicate!(num_steps, seed, factor, value, kw)\n\nRun a replication for num_steps steps. The other parameters are used to initialize the model. Returns model dataframe. The final dataframe contains extra columns to represent seed and factor.\n\n\n\n\n\n","category":"method"},{"location":"99-api/#Visualisations","page":"API Reference","title":"Visualisations","text":"","category":"section"},{"location":"99-api/","page":"API Reference","title":"API Reference","text":"Modules = [RiceBPH.Visualisations]\nOrder   = [:function, :type, :constant]","category":"page"},{"location":"99-api/#RiceBPH.Visualisations.FLOWER_COLOR","page":"API Reference","title":"RiceBPH.Visualisations.FLOWER_COLOR","text":"Color of the flower cells on the heatmap (#FFC107).\n\n\n\n\n\n","category":"constant"},{"location":"99-api/#RiceBPH.Visualisations.RICE_COLORS","page":"API Reference","title":"RiceBPH.Visualisations.RICE_COLORS","text":"Color of the rice cells on the heatmap, the color is RGB(0.0, 0.8, 0.0, energy) where energy is the energy of the rice cell.\n\n\n\n\n\n","category":"constant"},{"location":"99-api/#constants","page":"API Reference","title":"Constants","text":"","category":"section"},{"location":"99-api/#Population-structure-related","page":"API Reference","title":"Population structure related","text":"","category":"section"},{"location":"99-api/#Reproduction-related","page":"API Reference","title":"Reproduction related","text":"","category":"section"},{"location":"99-api/","page":"API Reference","title":"API Reference","text":"RiceBPH.Models.AVG_EGGS_M\nRiceBPH.Models.AVG_EGGS_B","category":"page"},{"location":"99-api/#RiceBPH.Models.AVG_EGGS_M","page":"API Reference","title":"RiceBPH.Models.AVG_EGGS_M","text":"Average total number of eggs (fully winged form)\n\n\n\n\n\n","category":"constant"},{"location":"99-api/#RiceBPH.Models.AVG_EGGS_B","page":"API Reference","title":"RiceBPH.Models.AVG_EGGS_B","text":"Average total number of eggs (truncate winged form)\n\n\n\n\n\n","category":"constant"},{"location":"#RiceBPH-Model","page":"RiceBPH Model","title":"RiceBPH Model","text":"","category":"section"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"This is a model to simulate the rice-brown plant hopper dynamic. The goal of this model is to research the effect of cultivated flower on the spread inside rice fields of brown plant hopper (a dangerous rice pest).","category":"page"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"<video controls autoplay>\n  <source src=\"https://github.com/ndgnuh/RiceBPH/releases/download/assets/video.mp4\" type=\"video/mp4\">\n  Your browser does not support video tags\n</video>","category":"page"},{"location":"#Setup","page":"RiceBPH Model","title":"Setup","text":"","category":"section"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"This model is implemented using the Julia language, please install it from this link. We recommend using version Julia 1.9.","category":"page"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"After that, setup the project's dependencies:","category":"page"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"julia --project -e 'using Pkg; Pkg.resolve(); Pkg.instantiate()'","category":"page"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"[Optional] Build a \"system image\". A system image contains compiled code, so that Julia does not have to recompile everything everytime it runs. TLDR: this reduces latency.","category":"page"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"julia --project scripts/build_system_image.jl","category":"page"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"As far as I know, you need a working C compiler for this step. If not, try installing Julia 1.9. The 1.9 version has binary caching so it should have less latency than previous versions.","category":"page"},{"location":"#Running-the-model","page":"RiceBPH Model","title":"Running the model","text":"","category":"section"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"Here we show some simple examples. The running scripts are placed in the scripts/ folder. If you wish to customize, all of the scripts have --help flags, which lists all the options.","category":"page"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"Model exploration:","category":"page"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"julia --project scripts/main.jl configs/exploration.toml\n\n# If you built a system image when setting up\njulia -J ricebph.sys.so --project scripts/main.jl configs/exploration.toml","category":"page"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"Render a video:","category":"page"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"julia --project scripts/main.jl configs/video.toml\njulia -J ricebph.sys.so --project scripts/main.jl configs/video.toml","category":"page"},{"location":"#Reproduce-our-results","page":"RiceBPH Model","title":"Reproduce our results","text":"","category":"section"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"We setup tests to guarantee that our model is fully reproducible (see test/runtests.jl).","category":"page"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"First replicate the data:","category":"page"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"julia --project scripts/replicate_data.jl","category":"page"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"Output data will be written to outputs.","category":"page"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"And then replicate the figures:","category":"page"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"julia --project scripts/replicate_figures.jl","category":"page"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"The figures will be stored in figures.","category":"page"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"If the replication is too slow, try using multi-processing. It's really simple:","category":"page"},{"location":"","page":"RiceBPH Model","title":"RiceBPH Model","text":"# Eight processes\njulia -p 8 --project scripts/replicate_data.jl","category":"page"}]
}
