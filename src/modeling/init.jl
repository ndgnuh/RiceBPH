using ImageFiltering
using Random
using Agents

"""
    init_cell_types(map_size::Integer, flower_width::Integer)

Returns a bool matrix, 1 ~ food cell, 0 ~ flower cell.
"""
function init_cell_types(map_size::Integer, flower_width::Integer)
    cell_types = fill(RiceCell, map_size, map_size)
    start = (map_size - flower_width) ÷ 2 + (flower_width + map_size) % 2 + 1
    for i in start:(start + flower_width - 1)
        cell_types[i, :] .= FlowerCell
    end
    return cell_types
end

"""
    init_rice_map(map_size::Integer)

Returns `ones(Float32, map_size, map_size)`
"""
function init_rice_map(map_size::Integer)
    food = ones(Float32, map_size, map_size)
    return food
end

"""
    init_pr_eliminate(init_pr::Float32, cell_types::Matrix{CellType}; gauss::Float32 = 2.5f0)
    init_pr_eliminate(P::Float32, M::Matrix{Bool}; σ::Float32 = 2.5f0)

Returns `Float32` matrix of elimination probability.
Matrix is generated by

``(P ⋅ (1 - M)) ∗ G(σ).``
"""
function init_pr_eliminate(init_pr::Float32, cell_types::Matrix{CellType};
                           gauss::Float32 = 2.5f0)
    kernel = Kernel.gaussian(gauss)
    pr_eliminate = imfilter((@. init_pr * (cell_types == FlowerCell)), kernel)
    return pr_eliminate
end

"""
    init_properties(parameters::ModelParameters)

Construct a `ModelProperties` from `ModelParameters`.
"""
function init_properties(parameters::ModelParameters)
    # unpack
    map_size = parameters.map_size
    flower_width = parameters.flower_width

    # properties
    energy_consume = parameters.energy_transfer / 4.0f0
    rice_map = init_rice_map(map_size)
    cell_types = init_cell_types(map_size, flower_width)
    pr_eliminate_map = init_pr_eliminate(parameters.init_pr_eliminate, cell_types)
    moving_directions = copy(MOVING_DIRECTIONS)

    # Rice cell marking
    rice_positions = findall(==(RiceCell), cell_types)
    num_rice_cells = length(rice_positions)

    eliminate_positions = [idx.I for idx in findall(!iszero, pr_eliminate_map)]

    return ModelProperties(; energy_consume, moving_directions,
                           pr_eliminate_map, eliminate_positions,
                           rice_map, cell_types,
                           rice_positions, num_rice_cells,
                           parameters)
end

"""
    init_positions(rng, position::InitPosition, num_bphs::Integer, map_size::Integer)

Return an iterator over all the initial positions.

See also: `IP_PTS`, `IP_DST`, `InitPosition`.
"""
function init_positions(rng, position::InitPosition, num_bphs::Integer, map_size::Integer)
    if position == Corner
        xy = wsample(rng, IP_PTS, IP_DST, num_bphs * 2)
        points = reshape(xy, 2, num_bphs)
        Iterators.map(Tuple, eachcol(points))
    else
        y = wsample(rng, IP_PTS, IP_DST, num_bphs)
        x = rand(rng, 1:map_size, num_bphs)
        zip(y, x)
    end
end

"""
    init_model(; seed::Union{Int, Nothing} = Nothing, kwargs...)

Return a ABM model. Keyword arguments are passed to `ModelParameters`.
"""
function init_model(; seed::Union{Int, Nothing} = nothing, kwargs...)
    #
    # Parameters and properties
    #
    parameters = ModelParameters(; kwargs...)
    properties = init_properties(parameters)

    #
    # Modele object
    #
    space = GridSpace(properties.rice_map |> size; periodic = false)
    rng = MersenneTwister(seed)
    scheduler = Schedulers.ByProperty(:energy)
    model = AgentBasedModel(BPH, space; rng, properties, scheduler)

    #
    # Initalize agents
    #
    positions = init_positions(rng,
                               parameters.init_position,
                               parameters.num_init_bphs,
                               parameters.map_size)
    energy_dst = normal_range(0.0f0, 1.0f0)
    for pos::Tuple{Int, Int} in positions
        id = nextid(model)
        energy = rand(rng, energy_dst)
        gender = wsample(rng, GENDERS, GENDER_DST)
        form = wsample(rng, FORMS, FORM_DST)
        stage = wsample(rng, STAGES, STAGE_DST)
        stage_cd = randt(rng, Int16, STAGE_CDS[(stage, gender, form)])
        reproduction_cd = if stage == Adult && rand(rng, Bool)
            randt(rng, Int16, REPRODUCE_CDS[form])
        else
            randt(rng, Int16, REPRODUCE_1ST_CDS[form])
        end
        agent = BPH(; id, energy, pos, gender, form, stage, stage_cd, reproduction_cd)
        add_agent_pos!(agent, model)
    end

    # 
    # First step statistics
    #
    model_action_summarize!(model)

    #
    # Return the model object
    #
    return model
end
